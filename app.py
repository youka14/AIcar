
from PIL import Image
import tkinter as tk
from tkinter import filedialog
from yolo import YOLO
import io,os
import base64
import time
import numpy as np
import cv2
from keras.backend import clear_session
from flask import make_response,Response

from flask import Flask, render_template, request , redirect, url_for
import pymysql
conn = pymysql.connect(host='127.0.0.1',user='root',passwd='144712',db='mydb6',charset='utf8')
cur = conn.cursor()
app = Flask(__name__)


#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# @app.route('/')
# def hello_world():
#     return 'Hello World!'


#--------------登录-------------------
@app.route('/login',methods=['GET'])
def login():
    return render_template('login01.html')

@app.route('/login',methods=['POST'])
def loginCheck():
    username = request.form['username']
    password = request.form['password']
    sql = "select * from t_user where username = '%s' and password = '%s'" % (username, password)
    cur.execute(sql)
    username = cur.fetchall()
    msg = "用户名或密码错误"
    if username:
        return redirect(url_for('index'))
    else:
        return render_template('login01.html', message=msg)

#----------------主页-------------------
@app.route('/index',methods=['GET'])
def index():
        return render_template('index.html')

#-------------- 功能模块 ----------------
########################## 图片检测 ##################
@app.route('/func2',methods=['GET','POST'])
def func2():
    clear_session()
    return render_template('func2.html')

@app.route('/predict_pic',methods=['GET','POST'])
def predict_pic():
    img_stream=''
    dir_save_path = "img_out/"
    yolo = YOLO()
    # ----------------------------------------------------------------------------------------------------------#
    #   mode用于指定测试的模式：
    #   'predict'表示单张图片预测，如果想对预测过程进行修改，如保存图片，截取对象等，可以先看下方详细的注释
    #   'video'表示视频检测，可调用摄像头或者视频进行检测，详情查看下方注释。
    #   'fps'表示测试fps，使用的图片是img里面的street.jpg，详情查看下方注释。
    #   'dir_predict'表示遍历文件夹进行检测并保存。默认遍历img文件夹，保存img_out文件夹，详情查看下方注释。
    # ----------------------------------------------------------------------------------------------------------#
    mode = "predict"
    # ----------------------------------------------------------------------------------------------------------#
    #   video_path用于指定视频的路径，当video_path=0时表示检测摄像头
    #   想要检测视频，则设置如video_path = "xxx.mp4"即可，代表读取出根目录下的xxx.mp4文件。
    #   video_save_path表示视频保存的路径，当video_save_path=""时表示不保存
    #   想要保存视频，则设置如video_save_path = "yyy.mp4"即可，代表保存为根目录下的yyy.mp4文件。
    #   video_fps用于保存的视频的fps
    #   video_path、video_save_path和video_fps仅在mode='video'时有效
    #   保存视频时需要ctrl+c退出或者运行到最后一帧才会完成完整的保存步骤。
    # ----------------------------------------------------------------------------------------------------------#
    video_path = 0
    video_save_path = ""
    video_fps = 25.0
    # -------------------------------------------------------------------------#
    #   test_interval用于指定测量fps的时候，图片检测的次数
    #   理论上test_interval越大，fps越准确。
    # -------------------------------------------------------------------------#
    test_interval = 100
    # -------------------------------------------------------------------------#
    #   dir_origin_path指定了用于检测的图片的文件夹路径
    #   dir_save_path指定了检测完图片的保存路径
    #   dir_origin_path和dir_save_path仅在mode='dir_predict'时有效
    # -------------------------------------------------------------------------#
    dir_origin_path = "img/"
    # dir_save_path = "img_out/"

    if mode == "predict":
        print('=============================')
        '''
        1、如果想要进行检测完的图片的保存，利用r_image.save("img.jpg")即可保存，直接在predict.py里进行修改即可。 
        2、如果想要获得预测框的坐标，可以进入yolo.detect_image函数，在绘图部分读取top，left，bottom，right这四个值。
        3、如果想要利用预测框截取下目标，可以进入yolo.detect_image函数，在绘图部分利用获取到的top，left，bottom，right这四个值
        在原图上利用矩阵的方式进行截取。
        4、如果想要在预测图上写额外的字，比如检测到的特定目标的数量，可以进入yolo.detect_image函数，在绘图部分对predicted_class进行判断，
        比如判断if predicted_class == 'car': 即可判断当前目标是否为车，然后记录数量即可。利用draw.text即可写字。
        '''
        # while True:
        print('-----------------------------')
        # 打开选择文件夹对话框
        root = tk.Tk()
        root.withdraw()
        # # 选择文件夹
        # Folderpath = filedialog.askdirectory()
        # 选择文件
        Filepath = filedialog.askopenfilename()
        img = Filepath

        try:
            image = Image.open(img)
        except:
            print('Open Error! Try again!')
            clear_session()
            root.destroy()
            return render_template('func2.html',msg='未打开任何图片！')
        else:
            r_image = yolo.detect_image(image)
            print(r_image)
            name = os.path.basename(img)
            print(name)
            r_image.save(os.path.join(dir_save_path, name))
            print(dir_save_path+name)
            with open(dir_save_path+name, 'rb') as img_f:
                img_stream = img_f.read()
                img_stream = base64.b64encode(img_stream)
            # r_image.show()
            print(img_stream)
            res = img_stream.decode()
            root.destroy()
            clear_session()
    return render_template('func2.html',res=res)
    # return render_template('func2.html',res='' )



# ########################## 视频检测 ####################


@app.route('/func',methods=['GET','POST'])
def func():
    clear_session()
    return render_template('func.html')

@app.route('/video_c',methods=['GET','POST'])
def video_c():
    yolo = YOLO()
    mode = "video"
    # 打开选择文件夹对话框
    root = tk.Tk()
    root.withdraw()
    # # 选择文件夹
    # Folderpath = filedialog.askdirectory()
    # 选择文件
    Filepath = filedialog.askopenfilename()

    video_path = Filepath

    video_save_path = ""
    video_fps = 25.0

    test_interval = 100
    if mode == "video":
        capture = cv2.VideoCapture(video_path)
        if video_save_path != "":
            fourcc = cv2.VideoWriter_fourcc(*'XVID')
            size = (int(capture.get(cv2.CAP_PROP_FRAME_WIDTH)), int(capture.get(cv2.CAP_PROP_FRAME_HEIGHT)))
            out = cv2.VideoWriter(video_save_path, fourcc, video_fps, size)

        ref, frame = capture.read()
        if not ref:
            root.destroy()
            # clear_session()
            # raise ValueError("未能正确读取摄像头（视频），请注意是否正确安装摄像头（是否正确填写视频路径）。")
            return
        fps = 0.0
        while (True):
            t1 = time.time()
            # 读取某一帧
            ref, frame = capture.read()
            if not ref:
                break
            # 格式转变，BGRtoRGB
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            # 转变成Image
            frame = Image.fromarray(np.uint8(frame))
            # 进行检测
            frame = np.array(yolo.detect_image(frame))
            # RGBtoBGR满足opencv显示格式
            frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)

            fps = (fps + (1. / (time.time() - t1))) / 2
            print("fps= %.2f" % (fps))
            frame = cv2.putText(frame, "fps= %.2f" % (fps), (0, 40), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

            retval,frame = cv2.imencode('.jpg',frame)
            frame = frame.tobytes()
            # print(frame)
            yield (b'--frame\r\n'
                   b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n\r\n')

@app.route('/video_feed2')
def video_feed2():
    print('------------------------------')
    clear_session()
    return Response(video_c(), mimetype='multipart/x-mixed-replace; boundary=frame')

############################ 实时监控 ###################
@app.route('/func3',methods=['GET','POST'])
def func3():
    return render_template('func3.html')

@app.route('/video_check',methods=['GET'])
def video_check():
    yolo = YOLO()
    # ----------------------------------------------------------------------------------------------------------#
    #   mode用于指定测试的模式：
    #   'predict'表示单张图片预测，如果想对预测过程进行修改，如保存图片，截取对象等，可以先看下方详细的注释
    #   'video'表示视频检测，可调用摄像头或者视频进行检测，详情查看下方注释。
    #   'fps'表示测试fps，使用的图片是img里面的street.jpg，详情查看下方注释。
    #   'dir_predict'表示遍历文件夹进行检测并保存。默认遍历img文件夹，保存img_out文件夹，详情查看下方注释。
    # ----------------------------------------------------------------------------------------------------------#
    mode = "video"
    # ----------------------------------------------------------------------------------------------------------#
    #   video_path用于指定视频的路径，当video_path=0时表示检测摄像头
    #   想要检测视频，则设置如video_path = "xxx.mp4"即可，代表读取出根目录下的xxx.mp4文件。
    #   video_save_path表示视频保存的路径，当video_save_path=""时表示不保存
    #   想要保存视频，则设置如video_save_path = "yyy.mp4"即可，代表保存为根目录下的yyy.mp4文件。
    #   video_fps用于保存的视频的fps
    #   video_path、video_save_path和video_fps仅在mode='video'时有效
    #   保存视频时需要ctrl+c退出或者运行到最后一帧才会完成完整的保存步骤。
    # ----------------------------------------------------------------------------------------------------------#
    video_path = 0
    #"http://192.168.5.13:8080/?action=stream?dummy=param.mjpg"
    video_save_path = ""
    video_fps = 25.0
    # -------------------------------------------------------------------------#
    #   test_interval用于指定测量fps的时候，图片检测的次数
    #   理论上test_interval越大，fps越准确。
    # -------------------------------------------------------------------------#
    test_interval = 100
    if mode == "video":
        capture = cv2.VideoCapture(video_path,cv2.CAP_DSHOW)
        if video_save_path != "":
            fourcc = cv2.VideoWriter_fourcc(*'XVID')
            size = (int(capture.get(cv2.CAP_PROP_FRAME_WIDTH)), int(capture.get(cv2.CAP_PROP_FRAME_HEIGHT)))
            out = cv2.VideoWriter(video_save_path, fourcc, video_fps, size)

        ref, frame = capture.read()
        if not ref:
            raise ValueError("未能正确读取摄像头（视频），请注意是否正确安装摄像头（是否正确填写视频路径）。")

        fps = 0.0
        while (True):
            t1 = time.time()
            # 读取某一帧
            ref, frame = capture.read()
            if not ref:
                break
            # 格式转变，BGRtoRGB
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            # 转变成Image
            frame = Image.fromarray(np.uint8(frame))
            # 进行检测
            frame = np.array(yolo.detect_image(frame))
            # RGBtoBGR满足opencv显示格式
            frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)

            fps = (fps + (1. / (time.time() - t1))) / 2
            print("fps= %.2f" % (fps))
            frame = cv2.putText(frame, "fps= %.2f" % (fps), (0, 40), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

            retval,frame = cv2.imencode('.jpg',frame)
            frame = frame.tobytes()
            # print(frame)
            yield (b'--frame\r\n'
                   b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n\r\n')

@app.route('/video_feed')
def video_feed():
    print('------------------------------')
    clear_session()
    return Response(video_check(), mimetype='multipart/x-mixed-replace; boundary=frame')



#----------关于AIcar----------------
@app.route('/about',methods=['GET'])
def about():
    return render_template('about.html')

#----------联系我们----------------
@app.route('/contact',methods=['GET'])
def contact():
    return render_template('contact.html')


#--------------注册--------------------
@app.route('/adduser',methods=['GET'])
def getAdduser():
    return render_template('login02.html')
@app.route('/adduser',methods=['POST'])
def postAdduser():
    username = request.form.get('username')
    password = request.form.get('password')
    passwordcheck = request.form.get('passwordcheck')
    email = request.form.get('email')
    sql = "select * from t_user where username = '%s'" %username
    cur.execute(sql)
    user = cur.fetchall()
    sql1 = "select * from t_user where username = '%s' and password = '%s'" % (username, password)
    cur.execute(sql1)
    username = cur.fetchall()
    if user:
        message = '用户名已经存在'
        return render_template('login02.html', message=message)
    else:
        if password == passwordcheck:
            sql2 = "insert into t_user(username,password,email)values('%s','%s','%s')"%(username,password,email) #SQL语句处理
            cur.execute(sql2)
            conn.commit()
            return redirect(url_for('login'))
        else:
            message = "输入密码不一致"
            return render_template('login02.html',message=message)

if __name__ == '__main__':
    app.run()
